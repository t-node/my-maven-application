name: Deployments example

on:
  push:
    branches: ["main", "dev"]

# Keep permissions minimal; the release action needs 'contents: write' if you use GITHUB_TOKEN.
# If you're passing your own env-specific PATs (DEV_TOKEN/PROD_TOKEN), contents: write is not strictly required here.
permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      # Builds and tests with Gradle; identical to what the page shows.
      - name: Build
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build

      - name: Test
        uses: gradle/gradle-build-action@v3
        with:
          arguments: test

      # Persist the JAR(s) for later jobs (deploy-dev / deploy-prod)
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jars
          path: build/libs/*.jar

  deploy-dev:
    # Only run when pushing to the dev branch, after build passes
    if: github.ref == 'refs/heads/dev'
    needs: [build-and-test]
    runs-on: ubuntu-latest

    # The magic: referencing the 'dev' environment so it gets env-specific vars/secrets
    environment:
      name: dev
      # This URL appears in the UI for the deployment target (matches the page)
      url: https://github.com/${{ github.repository }}/releases/tag/v${{ vars.DEV_VERSION }}

    steps:
      - name: Download candidate artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-jars
          path: dist

      # Create a draft, pre-release tagged with the dev version
      - name: GH Release (dev)
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: v${{ vars.DEV_VERSION }}
          name: dev
          draft: true
          prerelease: true
          files: dist/*.jar
          # If you prefer the built-in token, comment the next line and rely on permissions.contents: write
          token: ${{ secrets.DEV_TOKEN }}

  deploy-prod:
    # Only run when pushing to the main branch, after build passes
    if: github.ref == 'refs/heads/main'
    needs: [build-and-test]
    runs-on: ubuntu-latest

    # Production environment: will PAUSE here until a reviewer approves (per your protection rule)
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/tag/v${{ vars.PROD_VERSION }}

    steps:
      - name: Download candidate artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-jars
          path: dist

      # Create a formal release with generated notes for prod
      - name: GH Release (prod)
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: v${{ vars.PROD_VERSION }}
          name: Production
          generate_release_notes: true
          files: dist/*.jar
          # If you prefer the built-in token, comment the next line and rely on permissions.contents: write
          token: ${{ secrets.PROD_TOKEN }}
