name: "Ultimate Mastery CI/CD"
on:
  push:
    branches: ["main", "hello"]
  pull_request:
    branches: ["main", "hello"]
    types: [opened, synchronize,reopened]
  workflow_dispatch:
    inputs:
      run-tests:
        description: "Run unit tests?"
        type: boolean
        default: true
      timeout-minutes:
        description: "Timeout in minutes"
        type: number
        default: 10
      who:
        description: "Who to greet here"
        type: string
        default: "World"
      deploy-env:
        description: "Deploy environment"
        required: true
        type: choice
        default: 'staging'
        options:
          - staging
          - production
          - development
  repository_dispatch:  # Fixed: Correct indentation
    types: [external-build]
  schedule:
    - cron: "30 5,15 * * *"

defaults:
  run:
    shell: bash

env:
  CI_STAGE: ${{ vars.STAGE_NAMEREPO || 'DEFAULT STAGE' }}

permissions:
  contents: read


concurrency:
  group: ${{ github.workflow}}-${{ github.ref }} 
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      build-time: ${{ steps.build-time.outputs.build-time }}
      greeting: ${{ steps.out.outputs.greeting }}
    steps:
      - name: Print environment variable
        run: |
          echo "CI Stage ${{ env.CI_STAGE }}"    
      - name: Compute Greeting
        id: out
        run: |
          who="${{ github.event.inputs.who || 'World' }}"
          echo "greeting=Hello, ${who}" >> $GITHUB_OUTPUT 
      - name: Summary (Plan)
        run: |
          {
            echo "## Plan"
            echo ""
            echo "- Event: \`${{ github.event_name }}\`"
            echo "- Who: \`${{ github.event.inputs.who || 'World' }}\`"
            echo "- CI Stage: \`${{ env.CI_STAGE }}\`"
            echo "- Greeting: \`${{ steps.out.outputs.greeting }}\`"
            echo ""
            echo "## Actions"
            echo ""
            echo "- Checkout repo"
            echo "- Setup Java"
            echo "- Build with Maven"
            echo "- Run tests with Maven"
            echo "- Upload artifact"
            echo "- Set build time output"
          } >> "$GITHUB_STEP_SUMMARY"    
      - name: UseTheAnswer
        run: |
          echo "Greeting: ${{ steps.out.outputs.greeting }}" 
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B -ntp -DskipTests package 
      - name: Run tests with Maven
        if: ${{inputs.run-tests || github.event_name != 'workflow_dispatch'}}
        run: mvn -B -ntp test 
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'build-artifact'
          path: 'target/*.jar'
      - name: Set build time output
        id: build-time
        run: |
          echo "builddxpxx-time=$(date +%s)" >> $GITHUB_OUTPUT
          echo "ci-stages=${{ env.CI_STAGE }}" >> $GITHUB_OUTPUT
          echo "Build time set: $(date +%s)"
          echo "CI Stage: ${{ env.CI_STAGE }}"

  call-reusable:
    uses: ./.github/workflows/reusable.yml
    with:
      java-version: '21'
      artifact-name: 'book.jar'
    secrets: inherit   # pass through repo/org secrets if needed


  hello-job:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      greeting: ${{ steps.hola.outputs.greeting }}
      bookName: ${{ steps.hola.outputs.bookName }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: say Hola! (Composite  Action Hola!)
        uses: ./.github/actions/say-Hola!
        id: hola
        with:
          who: "Linux-${{ runner.os }}"
          bookname: "LinuxBookAdministration-${{ runner.os }}"
  
  consume-outputs:
    runs-on: ubuntu-latest
    needs: [hello-job,build-linux]
    steps:
      - name: Echo greeting
        run: |
          echo "Greeting from build-time was: '${{ needs.build-linux.outputs.build-time }}"
          echo "Greeting from hello-job was: '${{ needs.hello-job.outputs.greeting }}"
          echo "BookName from hello-job was: '${{ needs.hello-job.outputs.bookName }}"
          
  external-trigger:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'external-build'
    runs-on: ubuntu-latest
    steps:
      - name: Dump external payload
        run: echo '${{ toJson(github.event.client_payload) }}'
   
  deploy:
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
      - name: Deploy to staging
        if: inputs.deploy-env == 'staging'
        run: echo "Deploying to ${{ inputs.deploy-env }}"
      - name: Deploy to production
        if: inputs.deploy-env == 'production'
        run: |
          echo "Deploying to production with key ${{ secrets.DEPLOY_KEY }}"
          echo "Production deployment completed"
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B -ntp -DskipTests package

      - name: Java Version Print
        run: java -version

      - name: Display OS info
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Runner OS: ${{ runner.os }}"
      
      - name: Generate artifacts
        run: | 
          echo "report" > report.txt
          echo "Build Completed" >> report.txt
          echo "Runner OS: ${{ runner.os }}" >> report.txt
          echo "Matrix OS: ${{ matrix.os }}" >> report.txt

      - name: Upload matrix report
        uses: actions/upload-artifact@v4
        with:
          name: 'matrix-report-${{ runner.os }}'
          path: 'report.txt'
      
     