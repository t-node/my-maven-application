name: create-failure-issue

on:
  # Allow manual runs from the Actions tab
  workflow_dispatch:
    inputs:
      title:
        description: 'Issue title'
        required: true
        type: string
      body:
        description: 'Issue body'
        required: true
        type: string

  # Allow other workflows to call this one
  workflow_call:
    inputs:
      title:
        required: true
        type: string
      body:
        required: true
        type: string
    secrets:
      # callers can pass their own token; if not, we will use default GITHUB_TOKEN via 'secrets: inherit'
      OVERRIDE_TOKEN:
        required: false
    outputs:
      issue-number:
        description: 'Created issue number'
        value: ${{ jobs.create.outputs.issue-number }}

concurrency:
  # Unique group per workflow+ref; fall back to head_ref when ref is undefined (e.g., pull_request)
  group: ${{ github.workflow }}-${{ github.ref || github.head_ref }}
  cancel-in-progress: true

permissions:
  # Least-privilege: allow this workflow to write issues; read contents
  issues: write
  contents: read

jobs:
  create:
    runs-on: ubuntu-latest
    outputs:
      issue-number: ${{ steps.post.outputs.issue_number }}
    steps:
      - name: Create issue via REST
        id: post
        env:
          TOKEN: ${{ secrets.OVERRIDE_TOKEN || secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO:  ${{ github.event.repository.name }}
          TITLE: ${{ inputs.title }}
          BODY:  ${{ inputs.body }}
        run: |
          set -e
          
          # Make the API call and capture response  
          resp="$(curl -sS -X POST \
            -H "authorization: Bearer ${TOKEN}" \
            -H "accept: application/vnd.github+json" \
            https://api.github.com/repos/${OWNER}/${REPO}/issues \
            -d "{\"title\":\"${TITLE}\",\"body\":\"${BODY}\"}")"
          
          # Check if response is empty  
          if [ -z "$resp" ]; then
            echo "Error: Empty response from GitHub API"
            exit 1
          fi
          
          # Simple and robust JSON parsing
          num="$(echo "$resp" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              print(data.get('number', ''))
          except Exception as e:
              sys.exit(1)
          ")"
                    
          # Check if extraction failed 
          if [ -z "$num" ] || [ "$num" = "None" ]; then
            echo "Failed to extract issue number from response"
            echo "Response was: $resp"
            exit 1
          fi
          
          echo "issue_number=$num" >> "$GITHUB_OUTPUT"
          echo "Created issue #$num"
          
          # Check if we got an error
          if echo "$num" | grep -q "ERROR:"; then
            echo "Failed to create issue: $num"
            echo "Raw response: $resp"
            exit 1
          fi
          
          echo "issue_number=$num" >> "$GITHUB_OUTPUT"
          echo "Created issue #$num"

      - name: Expose contexts (toJSON) â€“ masked where needed
        run: |
          echo "github: ${{ toJSON(github) }}" | head -c 4000
